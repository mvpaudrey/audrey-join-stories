// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JoinStoriesSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import JoinStoriesSDK
import QuartzCore
import SafariServices
import Swift
import UIKit.UIImage
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc final public class JoinConfiguration : ObjectiveC.NSObject {
  @objc public init(team: Swift.String)
  @objc deinit
}
@objc public enum StoriesAPIError : Swift.Int, Swift.Error {
  case configurationNotFound
  case configurationNoTeamFound
  case noData
  case fetchingStoriesTimedOut
  case fetchingStoriesFailed
  case fetchingStoriesEmpty
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingURL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias SimpleClosure = (() -> ())
public protocol EndPointType {
  var baseURL: Foundation.URL { get }
  var path: Swift.String { get }
  var httpMethod: JoinStoriesSDK.HTTPMethod { get }
  var task: JoinStoriesSDK.HTTPTask { get }
  var headers: JoinStoriesSDK.HTTPHeaders? { get }
}
@objc public enum PlayerStandaloneAnimationOrigin : Swift.Int {
  case `default`
  case top
  case topLeft
  case topRight
  case bottom
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class JoinStoriesStandaloneDefaultConfig : ObjectiveC.NSObject {
  @objc public static let shared: JoinStoriesSDK.JoinStoriesStandaloneDefaultConfig
  public var requestTimeoutInterval: Swift.Double
  public var playerBackgroundColor: UIKit.UIColor
  public var playerStandaloneAnimationOrigin: JoinStoriesSDK.PlayerStandaloneAnimationOrigin
  public var playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor
  final public let playerShowShareButton: Swift.Bool
  final public let playerHorizontalMargins: Swift.Int
  final public let playerCornerRadius: Swift.Int
  @objc deinit
}
@objc public class JoinStoriesStandaloneConfig : ObjectiveC.NSObject, JoinStoriesSDK.JoinStoriesConfig {
  @objc public var alias: Swift.String
  @objc public var requestTimeoutInterval: Foundation.TimeInterval
  @objc public var playerBackgroundColor: UIKit.UIColor
  @objc public var playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor
  @objc public var playerShowShareButton: Swift.Bool
  @objc public var playerHorizontalMargins: Swift.Int
  @objc public var playerCornerRadius: Swift.Int
  @objc public var playerProgressBarDefaultColor: Swift.String?
  @objc public var playerProgressBarFillColor: Swift.String?
  @objc public var playerProgressBarThickness: Swift.Int
  @objc public var playerProgressBarRadius: Swift.Int
  @objc public init(alias: Swift.String, requestTimeoutInterval: Foundation.TimeInterval = JoinStoriesStandaloneDefaultConfig.shared.requestTimeoutInterval, playerBackgroundColor: UIKit.UIColor = JoinStoriesStandaloneDefaultConfig.shared.playerBackgroundColor, playerStandaloneAnimationOrigin: JoinStoriesSDK.PlayerStandaloneAnimationOrigin = JoinStoriesStandaloneDefaultConfig.shared.playerStandaloneAnimationOrigin, playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor = JoinStoriesStandaloneDefaultConfig.shared.playerVerticalAnchor, playerShowShareButton: Swift.Bool = JoinStoriesStandaloneDefaultConfig.shared.playerShowShareButton, playerHorizontalMargins: Swift.Int = JoinStoriesStandaloneDefaultConfig.shared.playerHorizontalMargins, playerCornerRadius: Swift.Int = JoinStoriesStandaloneDefaultConfig.shared.playerCornerRadius, playerProgressBarDefaultColor: Swift.String? = nil, playerProgressBarFillColor: Swift.String? = nil, playerProgressBarThickness: Swift.Int = 0, playerProgressBarRadius: Swift.Int = 0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StorySlideDownTransition : ObjectiveC.NSObject, JoinStoriesSDK.StoryAnimatable {
  public var startingPoint: CoreFoundation.CGPoint
  public var circle: UIKit.UIView
  public var transitionMode: JoinStoriesSDK.TransitionMode
  public var circleColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
extension JoinStoriesSDK.StorySlideDownTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
}
public typealias StoriesCompletionHandler = (Swift.Result<Swift.Void, JoinStoriesSDK.StoriesAPIError>) -> Swift.Void
public typealias RNStoriesCompletionHandler = (Swift.Bool, JoinStoriesSDK.StoriesAPIError?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class JoinStories : ObjectiveC.NSObject {
  @objc public static let shared: JoinStoriesSDK.JoinStories
  @objc public static func setConfiguration(_ configuration: JoinStoriesSDK.JoinConfiguration)
  public static func startThumbView(config: JoinStoriesSDK.JoinStoriesThumbConfig, completion: @escaping JoinStoriesSDK.StoriesCallback)
  dynamic public static func startThumbView(config: JoinStoriesSDK.JoinStoriesThumbConfig, completion: @escaping JoinStoriesSDK.RNStoriesCallback)
  public static func startPlayer(config: JoinStoriesSDK.JoinStoriesStandaloneConfig, completion: @escaping JoinStoriesSDK.StoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  dynamic public static func startPlayer(config: JoinStoriesSDK.JoinStoriesStandaloneConfig, fromController controller: UIKit.UIViewController, completion: @escaping JoinStoriesSDK.RNStoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  @objc dynamic public static func stopPlayer()
  final public func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.StoriesCallback)
  dynamic final public func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.RNStoriesCallback)
  final public func startPlayer(config: JoinStoriesSDK.JoinStoriesStandaloneConfig, completion: @escaping JoinStoriesSDK.StoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  dynamic final public func startPlayer(config: JoinStoriesSDK.JoinStoriesStandaloneConfig, completion: @escaping JoinStoriesSDK.RNStoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  @objc dynamic final public func stopPlayer()
  final public func getThumbViewConfig() -> JoinStoriesSDK.JoinStoriesThumbConfig?
  final public func thumbAndLabelDimensions(ratio: Swift.Double = 0.7) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
  final public func containerDimension() -> Swift.Int
  final public func thumbViewSpacing() -> Swift.Int
  @objc deinit
}
public enum JoinConfigurationError : Swift.Int, Swift.Error {
  case noConfigurationFound
  case noTeamFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias StoriesCallback = (Swift.Result<[JoinStoriesSDK.StoryValue], JoinStoriesSDK.StoriesAPIError>) -> Swift.Void
public typealias RNStoriesCallback = ([JoinStoriesSDK.StoryValue]?, JoinStoriesSDK.StoriesAPIError?) -> Swift.Void
public protocol StoriesApiSpec {
  @available(*, deprecated, message: "This will be removed. Please use `fetchStories(config:completion)` instead")
  func fetchStories(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
  func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.StoriesCallback)
  func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.RNStoriesCallback)
}
public class StoriesApi : JoinStoriesSDK.StoriesApiSpec {
  public init(baseUrl: Swift.String, timeoutInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "This will be removed. Please use `fetchStories(config:completion)` instead")
  public func fetchStories(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
  public func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.StoriesCallback)
  public func fetchStories(config: any JoinStoriesSDK.JoinStoriesConfig, completion: @escaping JoinStoriesSDK.RNStoriesCallback)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JSONParameterEncoder : JoinStoriesSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JoinStoriesSDK.Parameters) throws
  @objc deinit
}
@objc public class StoryValue : ObjectiveC.NSObject, Swift.Decodable {
  public var id: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: JoinStoriesSDK.StoryValue, rhs: JoinStoriesSDK.StoryValue) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class StoryCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public static let reuseIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public var config: JoinStoriesSDK.StoryViewConfig
  @_Concurrency.MainActor(unsafe) public var thumbConfig: JoinStoriesSDK.JoinStoriesThumbConfig?
  @_Concurrency.MainActor(unsafe) public var storyPersistence: any JoinStoriesSDK.StoryPersistable
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @available(*, deprecated, message: "This will be removed. Use `setupCell(storyValue:storyConfig:ratio:)` for api requests")
  @_Concurrency.MainActor(unsafe) public func setupCell(storyValue: JoinStoriesSDK.StoryValue, with storyConfig: JoinStoriesSDK.StoryViewConfig, ratio: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func setupCell(storyValue: JoinStoriesSDK.StoryValue, with storyConfig: JoinStoriesSDK.JoinStoriesThumbConfig, ratio: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func scrollToNextItem()
  @_Concurrency.MainActor(unsafe) public func scrollToPreviousItem()
}
public enum StoryPresentationMode {
  case Sheet
  case ViewController
  public static func == (a: JoinStoriesSDK.StoryPresentationMode, b: JoinStoriesSDK.StoryPresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class StoryTransitionViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) open var stories: [JoinStoriesSDK.StoryValue]
  @_Concurrency.MainActor(unsafe) open var config: (any JoinStoriesSDK.JoinStoriesConfig)?
  @objc @_Concurrency.MainActor(unsafe) open var transition: JoinStoriesSDK.StoryCircularTransition
  @objc @_Concurrency.MainActor(unsafe) open var interactiveTransition: JoinStoriesSDK.StoryCircularInteractiveTransition
  @objc @_Concurrency.MainActor(unsafe) open var startingPoint: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension JoinStoriesSDK.StoryTransitionViewController : JoinStoriesSDK.StoryNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func storyItemShown(at indexPath: Foundation.IndexPath)
}
extension JoinStoriesSDK.StoryTransitionViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension JoinStoriesSDK.StoryTransitionViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func interactionControllerForDismissal(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
}
public enum StoryEndPoint {
  case getStories(team: Swift.String, alias: Swift.String)
}
extension JoinStoriesSDK.StoryEndPoint : JoinStoriesSDK.EndPointType {
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var httpMethod: JoinStoriesSDK.HTTPMethod {
    get
  }
  public var task: JoinStoriesSDK.HTTPTask {
    get
  }
  public var headers: JoinStoriesSDK.HTTPHeaders? {
    get
  }
}
public protocol StoryPersistable : AnyObject {
  func markAsSeen(id: Swift.String)
  func storyIsSeen(id: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class StoryViewConfigDefault : ObjectiveC.NSObject {
  @objc public static let shared: JoinStoriesSDK.StoryViewConfigDefault
  @objc final public let requestTimeoutInterval: Swift.Double
  @objc final public let containerDimension: Swift.Int
  @objc final public let fontName: Swift.String
  @objc final public let labelColor: UIKit.UIColor
  @objc final public let thumbViewSpacing: Swift.Int
  @objc final public let withLabel: Swift.Bool
  @objc final public let loaderInnerViewColor: [UIKit.UIColor]
  @objc final public let loaderColors: [UIKit.UIColor]
  @objc final public let loaderInnerViewWidth: Swift.Int
  @objc final public let loaderWidth: Swift.Int
  @objc final public let storyViewedIndicatorColor: UIKit.UIColor
  @objc final public let storyViewedIndicatorAlpha: Swift.Float
  @objc final public let thumbViewOverlayColor: UIKit.UIColor
  @objc final public let playerBackgroundColor: UIKit.UIColor
  @objc final public let playerShowShareButton: Swift.Bool
  @objc final public let playerHorizontalMargins: Swift.Int
  @objc final public let playerCornerRadius: Swift.Int
  @objc deinit
}
@objc public class JoinStoriesThumbConfig : ObjectiveC.NSObject, JoinStoriesSDK.JoinStoriesConfig {
  @objc public var alias: Swift.String
  @objc public var requestTimeoutInterval: Foundation.TimeInterval
  @objc public var playerBackgroundColor: UIKit.UIColor
  @objc public var playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor
  @objc public var playerShowShareButton: Swift.Bool
  @objc public var playerHorizontalMargins: Swift.Int
  @objc public var playerCornerRadius: Swift.Int
  @objc public var playerProgressBarDefaultColor: Swift.String?
  @objc public var playerProgressBarFillColor: Swift.String?
  @objc public var playerProgressBarThickness: Swift.Int
  @objc public var playerProgressBarRadius: Swift.Int
  @objc public init(alias: Swift.String, requestTimeoutInterval: Foundation.TimeInterval = StoryViewConfigDefault.shared.requestTimeoutInterval, containerDimension: Swift.Int = StoryViewConfigDefault.shared.containerDimension, fontName: Swift.String = StoryViewConfigDefault.shared.fontName, labelColor: UIKit.UIColor = StoryViewConfigDefault.shared.labelColor, thumbViewSpacing: Swift.Int = StoryViewConfigDefault.shared.thumbViewSpacing, withLabel: Swift.Bool = StoryViewConfigDefault.shared.withLabel, loaderInnerViewColor: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderInnerViewColor, loaderColors: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderColors, loaderInnerViewWidth: Swift.Int = StoryViewConfigDefault.shared.loaderInnerViewWidth, loaderWidth: Swift.Int = StoryViewConfigDefault.shared.loaderWidth, storyViewedIndicatorColor: UIKit.UIColor = StoryViewConfigDefault.shared.storyViewedIndicatorColor, storyViewedIndicatorAlpha: Swift.Float = StoryViewConfigDefault.shared.storyViewedIndicatorAlpha, thumbViewOverlayColor: UIKit.UIColor = StoryViewConfigDefault.shared.thumbViewOverlayColor, playerBackgroundColor: UIKit.UIColor = StoryViewConfigDefault.shared.playerBackgroundColor, playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor = .bottom, playerShowShareButton: Swift.Bool = StoryViewConfigDefault.shared.playerShowShareButton, playerHorizontalMargins: Swift.Int = StoryViewConfigDefault.shared.playerHorizontalMargins, playerCornerRadius: Swift.Int = StoryViewConfigDefault.shared.playerCornerRadius, playerProgressBarDefaultColor: Swift.String? = nil, playerProgressBarFillColor: Swift.String? = nil, playerProgressBarThickness: Swift.Int = 0, playerProgressBarRadius: Swift.Int = 0)
  public func getThumbViewSpacing() -> Swift.Int
  @objc deinit
}
extension JoinStoriesSDK.JoinStoriesThumbConfig : JoinStoriesSDK.StoryComponentsConfigurable {
  public func getThumbAndLabelDimensions(ratio: Swift.Double) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
}
public protocol ImageCacheType : AnyObject {
  func image(for url: Foundation.URL) -> UIKit.UIImage?
  func insertImage(_ image: UIKit.UIImage?, for url: Foundation.URL)
  func removeImage(for url: Foundation.URL)
  func removeAllImages()
  subscript(url: Foundation.URL) -> UIKit.UIImage? { get set }
}
final public class ImageCache : JoinStoriesSDK.ImageCacheType {
  @_hasMissingDesignatedInitializers public class Config {
    final public let countLimit: Swift.Int
    final public let memoryLimit: Swift.Int
    public static let defaultConfig: JoinStoriesSDK.ImageCache.Config
    @objc deinit
  }
  public init(config: JoinStoriesSDK.ImageCache.Config = Config.defaultConfig)
  final public func image(for url: Foundation.URL) -> UIKit.UIImage?
  final public func insertImage(_ image: UIKit.UIImage?, for url: Foundation.URL)
  final public func removeImage(for url: Foundation.URL)
  final public func removeAllImages()
  final public subscript(key: Foundation.URL) -> UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showError(_ error: JoinStoriesSDK.StoriesAPIError)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentStorySheet(story: JoinStoriesSDK.StoryValue, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func presentStoryPlayer(stories: [JoinStoriesSDK.StoryValue], config: any JoinStoriesSDK.JoinStoriesConfig, beginningAt indexPath: Foundation.IndexPath? = nil, animated: Swift.Bool, onDismiss: (() -> Swift.Void)? = nil)
}
public protocol StoryWebViewDelegate : WebKit.WKNavigationDelegate {
  func onPlayerDismiss()
  func didReceiveNoPreviousPageListener(on story: JoinStoriesSDK.StoryValue)
  func didReceiveNoNextPageListener(on story: JoinStoriesSDK.StoryValue)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class StoryPlayer : WebKit.WKWebView, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func addDelegate(_ delegate: (any JoinStoriesSDK.StoryWebViewDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
public enum CircularInteractiveTransitionSwipeDirection : CoreFoundation.CGFloat {
  case up
  case down
  public init?(rawValue: CoreFoundation.CGFloat)
  public typealias RawValue = CoreFoundation.CGFloat
  public var rawValue: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class StoryCircularInteractiveTransition : UIKit.UIPercentDrivenInteractiveTransition {
  @_Concurrency.MainActor(unsafe) open var interactionThreshold: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var swipeDirection: JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection
  @_Concurrency.MainActor(unsafe) open func attach(to: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex6: Swift.UInt32, alpha: CoreFoundation.CGFloat = 1)
  convenience public init(hex8: Swift.UInt32)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StoryThumbView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(thumbDimension: Swift.Int, labelDimension: Swift.Int, loaderInnerViewColor: [UIKit.UIColor]?, loaderColors: [UIKit.UIColor]?, loaderInnerViewWidth: Swift.Int?, loaderWidth: Swift.Int?, fontName: Swift.String?, labelColor: UIKit.UIColor?, withLabel: Swift.Bool?, storyViewedIndicatorColor: UIKit.UIColor?, storyViewedIndicatorAlpha: Swift.Float?, thumbViewOverlayColor: UIKit.UIColor?, displayType: JoinStoriesSDK.DisplayType)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func addOverlay(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func showOverlayView()
  @_Concurrency.MainActor(unsafe) public func hideOverlayView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadStory(story: JoinStoriesSDK.StoryValue)
  @objc deinit
}
extension JoinStoriesSDK.StoryThumbView {
  @_Concurrency.MainActor(unsafe) public func startLayerAnimations(speed: Swift.Float = 0.2, alpha: CoreFoundation.CGFloat = 0.7)
  @_Concurrency.MainActor(unsafe) public func stopLayerAnimations()
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func applySimpleStyle()
}
@objc public class StoryViewConfig : ObjectiveC.NSObject {
  public var containerDimension: Swift.Int
  @objc public init(requestTimeoutInterval: Foundation.TimeInterval = StoryViewConfigDefault.shared.requestTimeoutInterval, containerDimension: Swift.Int = StoryViewConfigDefault.shared.containerDimension, fontName: Swift.String = StoryViewConfigDefault.shared.fontName, labelColor: UIKit.UIColor = StoryViewConfigDefault.shared.labelColor, thumbViewSpacing: Swift.Int = StoryViewConfigDefault.shared.thumbViewSpacing, withLabel: Swift.Bool = StoryViewConfigDefault.shared.withLabel, loaderInnerViewColor: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderInnerViewColor, loaderColors: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderColors, loaderInnerViewWidth: Swift.Int = StoryViewConfigDefault.shared.loaderInnerViewWidth, loaderWidth: Swift.Int = StoryViewConfigDefault.shared.loaderWidth, storyViewedIndicatorColor: UIKit.UIColor = StoryViewConfigDefault.shared.storyViewedIndicatorColor, storyViewedIndicatorAlpha: Swift.Float = StoryViewConfigDefault.shared.storyViewedIndicatorAlpha, thumbViewOverlayColor: UIKit.UIColor = StoryViewConfigDefault.shared.thumbViewOverlayColor, playerBackgroundColor: UIKit.UIColor = StoryViewConfigDefault.shared.playerBackgroundColor)
  public func getThumbViewSpacing() -> Swift.Int
  @objc deinit
}
extension JoinStoriesSDK.StoryViewConfig : JoinStoriesSDK.StoryComponentsConfigurable {
  public func getThumbAndLabelDimensions(ratio: Swift.Double = 0.7) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func circleGradientBorder(withLineWidth width: CoreFoundation.CGFloat, andColors colors: [CoreGraphics.CGColor]) -> QuartzCore.CAGradientLayer
  @_Concurrency.MainActor(unsafe) public func circleBorder(withLineWidth width: CoreFoundation.CGFloat, strokeColor: CoreGraphics.CGColor, opacity: Swift.Float = 1.0) -> QuartzCore.CAShapeLayer
}
public enum DisplayType {
  case seen
  case unseen
  public static func == (a: JoinStoriesSDK.DisplayType, b: JoinStoriesSDK.DisplayType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGRect {
  public var x: CoreFoundation.CGFloat {
    get
    set
  }
  public var y: CoreFoundation.CGFloat {
    get
    set
  }
  public var width: CoreFoundation.CGFloat {
    get
    set
  }
  public var height: CoreFoundation.CGFloat {
    get
    set
  }
  public var top: CoreFoundation.CGFloat {
    get
    set
  }
  public var bottom: CoreFoundation.CGFloat {
    get
    set
  }
  public var left: CoreFoundation.CGFloat {
    get
    set
  }
  public var right: CoreFoundation.CGFloat {
    get
    set
  }
  public var center: CoreFoundation.CGPoint {
    get
    set
  }
}
public protocol StoryAnimatable {
  var startingPoint: CoreFoundation.CGPoint { get set }
  var circle: UIKit.UIView { get set }
  var transitionMode: JoinStoriesSDK.TransitionMode { get set }
  var circleColor: UIKit.UIColor { get set }
}
public enum TransitionMode : Swift.Int {
  case present
  case dismiss
  case pop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class StoryCircularTransition : ObjectiveC.NSObject, JoinStoriesSDK.StoryAnimatable {
  public var circle: UIKit.UIView
  public var startingPoint: CoreFoundation.CGPoint {
    get
    set
  }
  public var circleColor: UIKit.UIColor
  public var transitionMode: JoinStoriesSDK.TransitionMode
  @objc override dynamic public init()
  @objc deinit
}
extension JoinStoriesSDK.StoryCircularTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
}
public enum ImageLoaderError : Swift.Error {
  case noData
  case common(error: any Swift.Error)
}
final public class ImageLoader {
  public static let shared: JoinStoriesSDK.ImageLoader
  public init(cache: any JoinStoriesSDK.ImageCacheType = ImageCache())
  final public func loadImage(from url: Foundation.URL, completion: @escaping (Swift.Result<UIKit.UIImage?, JoinStoriesSDK.ImageLoaderError>) -> Swift.Void)
  @objc deinit
}
@objc public protocol StoryNavigationDelegate {
  @objc func storyItemShown(at indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class StoryPlayerViewController : UIKit.UIViewController, JoinStoriesSDK.StoryWebViewDelegate, WebKit.WKNavigationDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var startingPoint: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var transition: any JoinStoriesSDK.StoryAnimatable
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) public func onPlayerDismiss()
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveNoPreviousPageListener(on story: JoinStoriesSDK.StoryValue)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveNoNextPageListener(on story: JoinStoriesSDK.StoryValue)
  @objc deinit
}
extension JoinStoriesSDK.StoryPlayerViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension JoinStoriesSDK.StoryPlayerViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
extension JoinStoriesSDK.StoryPlayerViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentAlert(title: Swift.String, message: Swift.String)
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias NetworkRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> ()
@_hasMissingDesignatedInitializers public class URLParameterEncoder : JoinStoriesSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JoinStoriesSDK.Parameters) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StorySlideUpTransition : ObjectiveC.NSObject, JoinStoriesSDK.StoryAnimatable {
  public var startingPoint: CoreFoundation.CGPoint
  public var circle: UIKit.UIView
  public var transitionMode: JoinStoriesSDK.TransitionMode
  public var circleColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
extension JoinStoriesSDK.StorySlideUpTransition : UIKit.UIViewControllerTransitioningDelegate {
}
extension JoinStoriesSDK.StorySlideUpTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addTapGestureRecognizer(action: (() -> Swift.Void)?)
}
@objc public enum PlayerVerticalAnchor : Swift.Int, Swift.Equatable {
  case topIgnoringSafeArea
  case topWithSafeArea
  case bottom
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol JoinStoriesConfig {
  @objc var alias: Swift.String { get set }
  @objc var requestTimeoutInterval: Foundation.TimeInterval { get set }
  @objc var playerBackgroundColor: UIKit.UIColor { get set }
  @objc var playerVerticalAnchor: JoinStoriesSDK.PlayerVerticalAnchor { get set }
  @objc var playerShowShareButton: Swift.Bool { get set }
  @objc var playerHorizontalMargins: Swift.Int { get set }
  @objc var playerCornerRadius: Swift.Int { get set }
  @objc var playerProgressBarDefaultColor: Swift.String? { get set }
  @objc var playerProgressBarFillColor: Swift.String? { get set }
  @objc var playerProgressBarThickness: Swift.Int { get set }
  @objc var playerProgressBarRadius: Swift.Int { get set }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public func topAreaInset() -> CoreFoundation.CGFloat
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case requestParameters(bodyParameters: JoinStoriesSDK.Parameters?, bodyEncoding: JoinStoriesSDK.ParameterEncoding, urlParameters: JoinStoriesSDK.Parameters?)
  case requestParametersAndHeaders(bodyParameters: JoinStoriesSDK.Parameters?, bodyEncoding: JoinStoriesSDK.ParameterEncoding, urlParameters: JoinStoriesSDK.Parameters?, additionHeaders: JoinStoriesSDK.HTTPHeaders?)
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  func encode(urlRequest: inout Foundation.URLRequest, with parameters: JoinStoriesSDK.Parameters) throws
}
public enum ParameterEncoding {
  case urlEncoding
  case jsonEncoding
  case urlAndJsonEncoding
  public func encode(urlRequest: inout Foundation.URLRequest, bodyParameters: JoinStoriesSDK.Parameters?, urlParameters: JoinStoriesSDK.Parameters?) throws
  public static func == (a: JoinStoriesSDK.ParameterEncoding, b: JoinStoriesSDK.ParameterEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StoryComponentsConfigurable {
  func getThumbAndLabelDimensions(ratio: Swift.Double) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
}
extension JoinStoriesSDK.StoriesAPIError : Swift.Equatable {}
extension JoinStoriesSDK.StoriesAPIError : Swift.Hashable {}
extension JoinStoriesSDK.StoriesAPIError : Swift.RawRepresentable {}
extension JoinStoriesSDK.NetworkError : Swift.Equatable {}
extension JoinStoriesSDK.NetworkError : Swift.Hashable {}
extension JoinStoriesSDK.NetworkError : Swift.RawRepresentable {}
extension JoinStoriesSDK.PlayerStandaloneAnimationOrigin : Swift.Equatable {}
extension JoinStoriesSDK.PlayerStandaloneAnimationOrigin : Swift.Hashable {}
extension JoinStoriesSDK.PlayerStandaloneAnimationOrigin : Swift.RawRepresentable {}
extension JoinStoriesSDK.JoinConfigurationError : Swift.Equatable {}
extension JoinStoriesSDK.JoinConfigurationError : Swift.Hashable {}
extension JoinStoriesSDK.JoinConfigurationError : Swift.RawRepresentable {}
extension JoinStoriesSDK.StoryPresentationMode : Swift.Equatable {}
extension JoinStoriesSDK.StoryPresentationMode : Swift.Hashable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.Equatable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.Hashable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.RawRepresentable {}
extension JoinStoriesSDK.DisplayType : Swift.Equatable {}
extension JoinStoriesSDK.DisplayType : Swift.Hashable {}
extension JoinStoriesSDK.TransitionMode : Swift.Equatable {}
extension JoinStoriesSDK.TransitionMode : Swift.Hashable {}
extension JoinStoriesSDK.TransitionMode : Swift.RawRepresentable {}
extension JoinStoriesSDK.HTTPMethod : Swift.Equatable {}
extension JoinStoriesSDK.HTTPMethod : Swift.Hashable {}
extension JoinStoriesSDK.HTTPMethod : Swift.RawRepresentable {}
extension JoinStoriesSDK.PlayerVerticalAnchor : Swift.Hashable {}
extension JoinStoriesSDK.PlayerVerticalAnchor : Swift.RawRepresentable {}
extension JoinStoriesSDK.ParameterEncoding : Swift.Equatable {}
extension JoinStoriesSDK.ParameterEncoding : Swift.Hashable {}
